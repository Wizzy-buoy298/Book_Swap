type User = record {
  id: text;
  name: text;
  email: text;
  createdAt: text;
};

type Book = record {
  id: text;
  userId: text;
  title: text;
  author: text;
  description: text;
  createdAt: text;
};

type SwapRequest = record {
  id: text;
  bookId: text;
  requestedById: text;
  status: text;
  createdAt: text;
};

type Feedback = record {
  id: text;
  userId: text;
  swapRequestId: text;
  rating: nat8;
  comment: text;
  createdAt: text;
};

service: {
  http_request: (
    record {
      url: text;
      method: text;
      body: vec nat8;
      headers: vec record { text; text };
      certificate_version: opt nat16;
    }
  ) -> (
    record {
      body: vec nat8;
      headers: vec record { text; text };
      upgrade: opt bool;
      streaming_strategy: opt variant {
        Callback: record {
          token: vec nat8;
          callback: func (vec nat8) -> (opt record { token: opt vec nat8; body: vec nat8 }) query;
        };
      };
      status_code: nat16;
    }
  ) query;

  http_request_update: (
    record {
      url: text;
      method: text;
      body: vec nat8;
      headers: vec record { text; text };
    }
  ) -> (
    record {
      body: vec nat8;
      headers: vec record { text; text };
      upgrade: opt bool;
      streaming_strategy: opt variant {
        Callback: record {
          token: vec nat8;
          callback: func (vec nat8) -> (opt record { token: opt vec nat8; body: vec nat8 }) query;
        };
      };
      status_code: nat16;
    }
  );

  createUser: (record { name: text; email: text }) -> (record { id: text }) query;

  getUsers: () -> (vec User) query;

  createBook: (record { userId: text; title: text; author: text; description: text }) -> (record { id: text }) query;

  getBooks: () -> (vec Book) query;

  createSwapRequest: (record { bookId: text; requestedById: text; status: text }) -> (record { id: text }) query;

  getSwapRequests: () -> (vec SwapRequest) query;

  createFeedback: (record { userId: text; swapRequestId: text; rating: nat8; comment: text }) -> (record { id: text }) query;

  getFeedback: () -> (vec Feedback) query;
}
